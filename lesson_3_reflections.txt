1) When would you want to use a remote repository rather than keeping all your work local?

If I need to work with other developer over a project, it is better and easier to have a centrol processing hub for the code management.  We could check out files and work on our own and then merge them together at a later date.  

2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

I would probably know better which file I like to work on and when I want to have a logical commit to the content.  If I have Git automatically stay up-to-date with the remote repository, it will be more difficult when I need to merge my changes with others.

3) Describe the differences between forks, clones, and branches.  When would you use one instead of another?

Forking is cloning a repository on gitHub to gitHub.  We use forking when we cannot change a respository of someone else's.  

Cloning is taking existing repository and make an exact copy of it.  The original repository can either be
local or remote.  Whatever we do on the clone will not affect the repository we cloned from.

Branching is the creation of one single repository.  We basically use branching when we work locally so that we can
try on various things based on the master branch, but without affecting the main branch.  When we have new ideas we can
merging them with the master branch at a logical point of time.

4) What is the benefit of having a copy of the last known state of the remote stored locally?

We can use "git pull origin master" command to fetch the origin and then merge the master with the origin/master in one single step.  This way, we could update our local copy of the remote branches as well as the local branch altogether.

5) How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

It would be easier if I'm working on my own files and no one else needs to make changes on my files.  That way I don't need to pull and push files frequently in order to have other people's updated files, and acknowledge other people about my change on the files.  However, when a group of people are working together on the same set of files, Git or GitHub will help a lot in updating the files as well as merging any files if that's necessary.  This would make the flow of coding environment a lot easier on collaboration work.

6) When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

When I want to try new thing but not sure if the code will work successfully, or if there is anything that is more experimental, I'll make changes in a separate branch to preserve the purity of the master branch.  This can ensure the master branch is always in good shape and not prone to experimental error.

To work directly on the master branch had the benefit of minimizing the need to pull, push and merge data in order to make availability of the most updated code to everyone.
